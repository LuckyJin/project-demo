<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sharding="http://shardingsphere.io/schema/shardingsphere/sharding"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
           http://shardingsphere.io/schema/shardingsphere/sharding
           http://shardingsphere.io/schema/shardingsphere/sharding/sharding.xsd">

    <!-- 自动将Service层注入-->
   <!-- <context:component-scan base-package="com.raycloud.service"/>

    <context:component-scan base-package="com.raycloud.aspect"/>-->

    <!-- dbcp数据源 1-->
    <bean id="dataSource0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!--这里如果写成${jdbc.driver}，就会出现加载jdbc驱动失败的问题，暂时不清楚什么原因-->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url1}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 连接池最大使用连接数 -->
        <property name="maxActive" value="20"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="1"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 连接池最大空闲 -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="3"/>
        <!-- 自动清除无用连接 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 清除无用连接的等待时间 -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 连接属性 -->
        <property name="connectionProperties" value="clientEncoding=UTF-8"/>
    </bean>

    <!--数据源2 分库分表数据源测试 -->
    <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!--这里如果写成${jdbc.driver}，就会出现加载jdbc驱动失败的问题，暂时不清楚什么原因-->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url2}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 连接池最大使用连接数 -->
        <property name="maxActive" value="20"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="1"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 连接池最大空闲 -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="3"/>
        <!-- 自动清除无用连接 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 清除无用连接的等待时间 -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 连接属性 -->
        <property name="connectionProperties" value="clientEncoding=UTF-8"/>
    </bean>

    <!-- dbcp数据源 3  多数据源，表不同测试-->
    <!-- <bean id="dataSource3" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
           destroy-method="close">
         &lt;!&ndash;这里如果写成${jdbc.driver}，就会出现加载jdbc驱动失败的问题，暂时不清楚什么原因&ndash;&gt;
         <property name="driverClassName" value="${jdbc.driver}" />
         <property name="url" value="${jdbc2.url}" />
         <property name="username" value="${jdbc2.username}" />
         <property name="password" value="${jdbc2.password}" />
 
         &lt;!&ndash; 连接池最大使用连接数 &ndash;&gt;
         <property name="maxActive" value="20"/>
         &lt;!&ndash; 初始化连接大小 &ndash;&gt;
         <property name="initialSize" value="1"/>
         &lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;
         <property name="maxWait" value="60000"/>
         &lt;!&ndash; 连接池最大空闲 &ndash;&gt;
         <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
         &lt;!&ndash; 连接池最小空闲 &ndash;&gt;
         <property name="minIdle" value="3"/>
         &lt;!&ndash; 自动清除无用连接 &ndash;&gt;
         <property name="removeAbandoned" value="true"/>
         &lt;!&ndash; 清除无用连接的等待时间 &ndash;&gt;
         <property name="removeAbandonedTimeout" value="180"/>
         &lt;!&ndash; 连接属性 &ndash;&gt;
         <property name="connectionProperties" value="clientEncoding=UTF-8"/>
     </bean>
    <bean id="multipleDataSource" class="com.raycloud.aspect.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="dataSource1"/> &lt;!&ndash;默认主库&ndash;&gt;
        <property name="targetDataSources">
            <map>
                <entry key="dataSource1" value-ref="dataSource1"/>            &lt;!&ndash;辅助aop完成自动数据库切换&ndash;&gt;
               &lt;!&ndash; <entry key="dataSource2" value-ref="dataSource3"/>&ndash;&gt;
            </map>
        </property>
    </bean>-->

    <!--分库策略-->
    <sharding:inline-strategy id="dataSourceStrategy" sharding-column="user_id"
                              algorithm-expression="dataSource$->{user_id % 2}"/>

    <!--分表策略-->
    <sharding:inline-strategy id="userStrategy" sharding-column="user_id"
                              algorithm-expression="user_$->{user_id % 2}"/>

    <sharding:data-source id="shardingDataSource">
        <sharding:sharding-rule data-source-names="dataSource0,dataSource1" default-data-source-name="dataSource1">
            <sharding:table-rules>
                <sharding:table-rule logic-table="user"
                                     actual-data-nodes="dataSource$->{0..1}.user_$->{0..1}"
                                     database-strategy-ref="dataSourceStrategy"
                                     table-strategy-ref="userStrategy"/>
            </sharding:table-rules>
        </sharding:sharding-rule>
    </sharding:data-source>


    <!-- mybatis的配置文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="shardingDataSource">

        </property>
        <property name="configLocation" value="classpath:config/spring/mybatis-config.xml"/>
        <property name="mapperLocations">
            <list>
                <value>classpath*:sqlmap/*Mapper.xml</value>
                <!--数据源3测试用-->
                <!--<value>classpath*:sqlmapDelivery/*Mapper.xml</value>-->
            </list>
        </property>
    </bean>


    <!-- spring与mybatis整合配置，扫描所有dao 和所有mapper文件 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.raycloud.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


    <tx:annotation-driven transaction-manager="txManager"/>
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="shardingDataSource"/>

    </bean>

    <!--date参数转换-->
    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="com.raycloud.springmvc.StringToDateConverter"/>
            </set>
        </property>
    </bean>

    <!-- 内容协商管理器  -->
    <!--1、首先检查路径扩展名（如my.pdf）；2、其次检查Parameter（如my?format=pdf）；3、检查Accept Header-->
   <!-- <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        &lt;!&ndash; 扩展名至mimeType的映射,即 /appuser.json => application/json &ndash;&gt;
        <property name="favorPathExtension" value="true"/>
        &lt;!&ndash; 用于开启 /userinfo/123?format=json 的支持 &ndash;&gt;
        <property name="favorParameter" value="true"/>
        <property name="parameterName" value="format"/>
        &lt;!&ndash; 是否忽略Accept Header &ndash;&gt;
        <property name="ignoreAcceptHeader" value="false"/>

        <property name="mediaTypes"> &lt;!&ndash;扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  &ndash;&gt;
            <value>
                json=application/json
                xml=application/xml
                html=text/html
            </value>
        </property>
        &lt;!&ndash; 默认的content type &ndash;&gt;
        <property name="defaultContentType" value="text/html"/>
    </bean>-->

    <aop:aspectj-autoproxy/>

    <!-- quartz数据源连接 注释用RAM-->
    <!-- <bean id="quartzDataSource" class="com.alibaba.druid.pool.RayDruidDataSource" init-method="init"
           destroy-method="close">
         <property name="secretRequest" ref="secretRequest"/>
         <property name="url" value="${quartz.datasource.url}"/>
         <property name="username" value="${quartz.datasource.username}"/>
         <property name="diamondCoord" value="${quartz.datasource.diamond-coord}"/>
         <property name="driverClassName" value="${quartz.datasource.driverClassName}"/>
         <property name="maxActive" value="${quartz.datasource.maxActive}"/>
         <property name="initialSize" value="${quartz.datasource.initialSize}"/>
         <property name="maxWait" value="${quartz.datasource.maxWait}"/>
         <property name="minIdle" value="${quartz.datasource.minIdle}"/>
         <property name="timeBetweenEvictionRunsMillis" value="3000"/>
         <property name="minEvictableIdleTimeMillis" value="300000"/>
         <property name="validationQuery" value="SELECT 'x'"/>
         <property name="testWhileIdle" value="true"/>
         <property name="testOnBorrow" value="false"/>
         <property name="testOnReturn" value="false"/>
         <property name="poolPreparedStatements" value="true"/>
         <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
         <property name="filters" value="stat"/>
     </bean>
 
     <bean id="quartzTxManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         <property name="dataSource" ref="quartzDataSource"/>
     </bean>-->

    <bean id="a" class="com.raycloud.test.A" scope="prototype">
        <property name="b" ref="b" />
    </bean>
    <bean id="b" class="com.raycloud.test.B" scope="prototype">
        <property name="c" ref="c" />
    </bean>
    <bean id="c" class="com.raycloud.test.C" scope="prototype">
        <property name="a" ref="a" />
    </bean>

</beans>